//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Algorithms Concurrent : Script File.cpp
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#include "Framework/DynamicServer/Algorithms/Concurrent/Algorithms_Concurrent.h"
#include "Framework/DynamicServer/Control/Algorithms/Concurrent/Control_Algorithms_Concurrent.h"`

#include "iostream"

using namespace FLORENCE_Server_Assembly;

//	PUBLIC -==============================================================================================================================================
//  ======================================================================================================================================================
//  ======================================================================================================================================================
//	CONSTANTS ********************************************************************************************************************************************
// 	******************************************************************************************************************************************************


//	REGISTERS ********************************************************************************************************************************************
// 	******************************************************************************************************************************************************


//	CONSTRUCTOR ******************************************************************************************************************************************
// 	******************************************************************************************************************************************************
    Algorithms_Concurrent::Algorithms_Concurrent()
    {
        this->ptr_Control_Algorithms_Concurrent = new Control_Algorithms_Concurrent();
        std::cout << ">> >> >> Object CREATED : Dynamic_Server_Framework/Algorithms/Concurrent/Control_Algorithms_Concurrent" << std::endl;

    }

    Algorithms_Concurrent::~Algorithms_Concurrent()
    {
        //dtor
    }


//	METHODS **********************************************************************************************************************************************
// 	******************************************************************************************************************************************************
    void Algorithms_Concurrent::do_Praise_0(Data_Input* obj_In, Data_Output* obj_Out, unsigned char coreId)
    {
        std::cout << "CoreID=" << int(coreId) << " " << "Algorithms_Concurrent::do_Praise_0(Data_Input* obj_In, Data_Output* obj_Out)" << std::endl;//SIMULATION
        obj_Out->setPraiseEventId( obj_In->getPraiseEventId() );
    }

//	GET & SET --------------------------------------------------------------------------------------------------------------------------------------------
// GET
    Control_Algorithms_Concurrent* Algorithms_Concurrent::getInstance_Control_Algorithms_Concurrent()
    {
        return this->ptr_Control_Algorithms_Concurrent;
    }


//	PROTECTED ============================================================================================================================================
//  ======================================================================================================================================================
//  ======================================================================================================================================================
//	CONSTANTS ********************************************************************************************************************************************
// 	******************************************************************************************************************************************************


//	REGISTERS ********************************************************************************************************************************************
// 	******************************************************************************************************************************************************


//	METHODS **********************************************************************************************************************************************
// 	******************************************************************************************************************************************************

//	GET & SET --------------------------------------------------------------------------------------------------------------------------------------------



//	PRIVATE ==============================================================================================================================================
//  ======================================================================================================================================================
//  ======================================================================================================================================================
//	CONSTANTS ********************************************************************************************************************************************
// 	******************************************************************************************************************************************************


//	REGISTERS ********************************************************************************************************************************************
// 	******************************************************************************************************************************************************
    class Control_Algorithms_Concurrent* Algorithms_Concurrent::ptr_Control_Algorithms_Concurrent = nullptr;


//	METHODS **********************************************************************************************************************************************
// 	******************************************************************************************************************************************************

//	GET & SET --------------------------------------------------------------------------------------------------------------------------------------------


//End <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
