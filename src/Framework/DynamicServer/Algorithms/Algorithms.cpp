//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Algorithms : Script File.cpp
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#include "Framework/DynamicServer/Algorithms/Algorithms.h"

using namespace FLORENCE_Server_Assembly;

//	PUBLIC -==============================================================================================================================================
//  ======================================================================================================================================================
//  ======================================================================================================================================================
//	CONSTANTS ********************************************************************************************************************************************
// 	******************************************************************************************************************************************************


//	REGISTERS ********************************************************************************************************************************************
// 	******************************************************************************************************************************************************


//	CONSTRUCTOR ******************************************************************************************************************************************
// 	******************************************************************************************************************************************************
    Algorithms::Algorithms(unsigned char* ptr_My_Num_Implemented_Cores)
    {
        this->ptr_Control_Algorithms = new Control_Algorithms();
        std::cout << ">> >> >> Object CREATED : Dynamic_Server_Framework/Control/Algorithms" << std::endl;

        this->ptr_Algorithms_Concurrent[*ptr_My_Num_Implemented_Cores-1];
        for(unsigned char index = 0; index < *ptr_My_Num_Implemented_Cores-1; index++)
        {
            this->ptr_Algorithms_Concurrent[index] = new Algorithms_Concurrent();
            std::cout << ">> >> >> Object CREATED : Dynamic_Server_Framework/Algorithms/Concurrent[" << int(index) << "]"<< std::endl;
        }

        this->ptr_Algorithms_ListenRespond = new Algorithms_ListenRespond();
        std::cout << ">> >> >> Object CREATED : Dynamic_Server_Framework/Algorithms/ListenRespond" << std::endl;
    }

    Algorithms::~Algorithms()
    {
        //dtor
    }



//	METHODS **********************************************************************************************************************************************
// 	******************************************************************************************************************************************************


//	GET & SET --------------------------------------------------------------------------------------------------------------------------------------------
    Algorithms_Concurrent* Algorithms::getInstance_Algorithms_Concurrent(unsigned char index)
    {
        return this->ptr_Algorithms_Concurrent[index];
    }
    Algorithms_ListenRespond* Algorithms::getInstance_Algorithms_ListenRespond()
    {
        return this->ptr_Algorithms_ListenRespond;
    }
    Control_Algorithms* Algorithms::getInstance_Control_Algorithms()
    {
        return this->ptr_Control_Algorithms;
    }


//	PROTECTED ============================================================================================================================================
//  ======================================================================================================================================================
//  ======================================================================================================================================================
//	CONSTANTS ********************************************************************************************************************************************
// 	******************************************************************************************************************************************************


//	REGISTERS ********************************************************************************************************************************************
// 	******************************************************************************************************************************************************


//	METHODS **********************************************************************************************************************************************
// 	******************************************************************************************************************************************************

//	GET & SET --------------------------------------------------------------------------------------------------------------------------------------------



//	PRIVATE ==============================================================================================================================================
//  ======================================================================================================================================================
//  ======================================================================================================================================================
//	CONSTANTS ********************************************************************************************************************************************
// 	******************************************************************************************************************************************************


//	REGISTERS ********************************************************************************************************************************************
// 	******************************************************************************************************************************************************
        class Algorithms_Concurrent* Algorithms::ptr_Algorithms_Concurrent[2] = { nullptr, nullptr };
        class Algorithms_ListenRespond* Algorithms::ptr_Algorithms_ListenRespond = nullptr;
        class Control_Algorithms* Algorithms::ptr_Control_Algorithms = nullptr;


//	METHODS **********************************************************************************************************************************************
// 	******************************************************************************************************************************************************

//	GET & SET --------------------------------------------------------------------------------------------------------------------------------------------


//End <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
