//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Control Ececute : Script File.cpp
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#include "Framework/DynamicServer/Control/Execute/Control_Execute.h"

#include "Framework/DynamicServer/Global.h"
#include "iostream"

using namespace FLORENCE_Server_Assembly;
//	PUBLIC -==============================================================================================================================================
//  ======================================================================================================================================================
//  ======================================================================================================================================================
//	CONSTANTS ********************************************************************************************************************************************
// 	******************************************************************************************************************************************************


//	REGISTERS ********************************************************************************************************************************************
// 	******************************************************************************************************************************************************
    bool Control_Execute::thread_Initialised[3] = {false, false, false};//NUMBER OF CORES :: getInstance_Global()->get_NumCores()


//	CONSTRUCTOR ******************************************************************************************************************************************
// 	******************************************************************************************************************************************************
    Control_Execute::Control_Execute(Global* ptr_Global_pass, unsigned char* ptr_My_Num_Implemented_Cores)
    {
        this->ptr_Num_Implemented_Cores_For_ControlExecute = ptr_My_Num_Implemented_Cores;
        this->ptr_Global_For_ControlExecute = ptr_Global_pass;

    }

    Control_Execute::~Control_Execute()
    {
        //dtor
    }


//	METHODS **********************************************************************************************************************************************
// 	******************************************************************************************************************************************************


//	GET & SET --------------------------------------------------------------------------------------------------------------------------------------------
// GET
    bool Control_Execute::getFlag_ThreadInitialised(unsigned char coreId)
    {
        //std::cout << "CoreID=" << int(coreId) << " " << "Control_Execute::getFlag_ThreadInitialised(unsigned char coreId)" << std::endl;//SIMULATION
        return this->thread_Initialised[coreId];
    }

// SET
    void Control_Execute::setConditionCodeOfThisThreadedCore(unsigned char coreId)
    {
        this->setFlag_ThreadInitialised(coreId, false);
    }
    bool Control_Execute::getFlag_SystemInitialised(unsigned char coreId)
    {
        bool systemInitialised = false;
        for(unsigned char index = 0; index < *ptr_Num_Implemented_Cores_For_ControlExecute; index++)
        {
            if(this->getFlag_ThreadInitialised(index) == true)
            {
                systemInitialised = true;
            }
        }
        std::cout << "CoreID=" << int(coreId) << " " << "Control_Execute::getFlag_SystemInitialised()=" << systemInitialised << std::endl;//SIMULATION;
        return systemInitialised;
    }
//	PROTECTED ============================================================================================================================================
//  ======================================================================================================================================================
//  ======================================================================================================================================================
//	CONSTANTS ********************************************************************************************************************************************
// 	******************************************************************************************************************************************************


//	REGISTERS ********************************************************************************************************************************************
// 	******************************************************************************************************************************************************


//	METHODS **********************************************************************************************************************************************
// 	******************************************************************************************************************************************************

//	GET & SET --------------------------------------------------------------------------------------------------------------------------------------------



//	PRIVATE ==============================================================================================================================================
//  ======================================================================================================================================================
//  ======================================================================================================================================================
//	CONSTANTS ********************************************************************************************************************************************
// 	******************************************************************************************************************************************************
    class Global* ptr_Global_For_ControlExecute = nullptr;

    unsigned char* ptr_Num_Implemented_Cores_For_ControlExecute = nullptr;

//	REGISTERS ********************************************************************************************************************************************
// 	******************************************************************************************************************************************************


//	METHODS **********************************************************************************************************************************************
// 	******************************************************************************************************************************************************


//	GET & SET --------------------------------------------------------------------------------------------------------------------------------------------
// GET

// SET
    void Control_Execute::setFlag_ThreadInitialised(unsigned char coreId, bool value)
    {
        this->thread_Initialised[coreId] = value;
        //System.Console.WriteLine(">> >> >> SET Field Value : Dynamic_Server_Backend/Control_Execute/thread_Initialised[" + coreId + "] = " + value);//SIMULATION
    }


//End <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
