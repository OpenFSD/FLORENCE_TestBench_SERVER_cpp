//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Control Execute - Write Enable : Header File.h
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#ifndef WRITEENABLE_H
#define WRITEENABLE_H

#include "Framework/DynamicServer/Global.h"
#include "Framework/LOGS/LOGS.h"

namespace FLORENCE_Server_Assembly
{
    class WriteEnable
    {
//	PUBLIC -==============================================================================================================================================
//  ======================================================================================================================================================
//  ======================================================================================================================================================
        public:
//	CONSTANTS ********************************************************************************************************************************************
// 	******************************************************************************************************************************************************


//	REGISTERS ********************************************************************************************************************************************
// 	******************************************************************************************************************************************************


//	CONSTRUCTOR ******************************************************************************************************************************************
// 	******************************************************************************************************************************************************
            WriteEnable(Global* ptr_Global_pass, unsigned char* ptr_My_Num_Implemented_Cores);
            virtual ~WriteEnable();


//	METHODS **********************************************************************************************************************************************
// 	******************************************************************************************************************************************************
            void write_End(unsigned char coreId);
            void write_Start(unsigned char coreId);

//	GET & SET --------------------------------------------------------------------------------------------------------------------------------------------
// GET
            unsigned char getFlag_CoreId_WriteEnable();

// SET


//	PROTECTED ============================================================================================================================================
//  ======================================================================================================================================================
//  ======================================================================================================================================================
        protected:
//	CONSTANTS ********************************************************************************************************************************************
// 	******************************************************************************************************************************************************


//	REGISTERS ********************************************************************************************************************************************
// 	******************************************************************************************************************************************************


//	METHODS **********************************************************************************************************************************************
// 	******************************************************************************************************************************************************

//	GET & SET --------------------------------------------------------------------------------------------------------------------------------------------



//	PRIVATE ==============================================================================================================================================
//  ======================================================================================================================================================
//  ======================================================================================================================================================
        private:
//	CONSTANTS ********************************************************************************************************************************************
// 	******************************************************************************************************************************************************
            static class Global* ptr_Global_For_Control_Execute_WriteEnable;
            static class Logs* ptr_ServerLogs_For_Control_Execute_WriteEnable;
            static unsigned char* ptr_Num_Implemented_Cores_For_Control_Execute_WriteEnable;

//	REGISTERS ********************************************************************************************************************************************
// 	******************************************************************************************************************************************************
            static unsigned char coreIdForWritePraiseIndex;
            static int count_CoreId_WriteActive[3];//NUMBER OF CORES :: getInstance_Global()->get_NumCores()
            static int count_CoreId_WriteIdle[3];//NUMBER OF CORES :: getInstance_Global()->get_NumCores()
            static int count_CoreId_WriteWait[3];//NUMBER OF CORES :: getInstance_Global()->get_NumCores()
            static bool flag_WriteState[3][2];//NUMBER OF CORES :: getInstance_Global()->get_NumCores() // [2]
            static unsigned char new_coreIdForWritePraiseIndex;
            static bool praisingWrite;
            static unsigned char que_CoreToWrite[3];//NUMBER OF CORES :: getInstance_Global()->get_NumCores()

//	METHODS **********************************************************************************************************************************************
// 	******************************************************************************************************************************************************
            void writeEnable_Activate(unsigned char coreId);
            void writeEnable_ShiftQueValues(unsigned char coreId, unsigned char coreId_A, unsigned char coreId_B);
            void writeEnable_SortQue(unsigned char coreId);
            void writeEnable_Request(unsigned char coreId);
            void writeQue_Update(unsigned char coreId);

//	GET & SET --------------------------------------------------------------------------------------------------------------------------------------------
// GET
            int getCount_WriteActive(unsigned char coreId);
            int getCount_WriteIdle(unsigned char coreId);
            int getCount_WriteWait(unsigned char coreId);
            bool getFlag_ReadWrite_Open();
            bool getFlag_WriteState(unsigned char coreId, unsigned char index);

// SET
            void setCount_WriteActive(unsigned char coreId, int value);
            void setCount_WriteIdle(unsigned char coreId, int value);
            void setCount_WriteWait(unsigned char coreId, int value);
            void setFlag_ReadWrite_Open(bool value);
            void setFlag_WriteState(unsigned char coreId, unsigned char index, bool value);
    };
}
#endif // WRITEENABLE_H
//End <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
