//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Control Execute : Header File.h
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#ifndef LAUNCHCONCURRENCY_H
#define LAUNCHCONCURRENCY_H


#include "Framework/DynamicServer/Global.h"

namespace FLORENCE_Server_Assembly
{
    class LaunchConcurrency
    {
//	PUBLIC -==============================================================================================================================================
//  ======================================================================================================================================================
//  ======================================================================================================================================================
        public:
//	CONSTANTS ********************************************************************************************************************************************
// 	******************************************************************************************************************************************************


//	REGISTERS ********************************************************************************************************************************************
// 	******************************************************************************************************************************************************


//	CONSTRUCTOR ******************************************************************************************************************************************
// 	******************************************************************************************************************************************************
            LaunchConcurrency(Global* ptr_Global_pass, unsigned char* ptr_My_Num_Implemented_Cores);
            virtual ~LaunchConcurrency();


//	METHODS **********************************************************************************************************************************************
// 	******************************************************************************************************************************************************
            void concurrent_Thread_Start(unsigned char coreId);
            void thread_End(unsigned char coreId);

//	GET & SET --------------------------------------------------------------------------------------------------------------------------------------------
// GET
            unsigned char getFlag_CoreId_CoreToLaunch();
            bool getFlag_ConcurrentCoreState(unsigned char coreId, unsigned char index);

// SET
            void setFlag_ConcurrentCoreState(unsigned char coreId, unsigned char index, bool value);


//	PROTECTED ============================================================================================================================================
//  ======================================================================================================================================================
//  ======================================================================================================================================================
        protected:
//	CONSTANTS ********************************************************************************************************************************************
// 	******************************************************************************************************************************************************


//	REGISTERS ********************************************************************************************************************************************
// 	******************************************************************************************************************************************************


//	METHODS **********************************************************************************************************************************************
// 	******************************************************************************************************************************************************

//	GET & SET --------------------------------------------------------------------------------------------------------------------------------------------



//	PRIVATE ==============================================================================================================================================
//  ======================================================================================================================================================
//  ======================================================================================================================================================
        private:
//	CONSTANTS ********************************************************************************************************************************************
// 	******************************************************************************************************************************************************
            static class Global* ptr_Global_For_LaunchConcurrency;
            static class Logs* ptr_ServerLogs_For_LaunchConcurrency;
            static unsigned char* ptr_NumImplementedCores_For_LaunchConcurrency;

//	REGISTERS ********************************************************************************************************************************************
// 	******************************************************************************************************************************************************

            static unsigned char coreIdForLaunchPraiseIndex;
            static int count_CoreId_LaunchActive[2];//NUMBER OF CONCURRENT CORES :: getInstance_Global()->get_NumCores() -1
            static int count_CoreId_LaunchIdle[2];//NUMBER OF CONCURRENT CORES :: getInstance_Global()->get_NumCores() -1
            static int count_CoreId_LaunchWait[2];//NUMBER OF CONCURRENT CORES :: getInstance_Global()->get_NumCores() -1
            static bool flag_ConcurrentCoreState[2][2];//NUMBER OF CORES :: getInstance_Global()->get_NumCores()
            static unsigned char new_coreIdForLaunchPraiseIndex;
            static bool praisingLaunch;
            static unsigned char que_CoreToLaunch[2];//NUMBER OF CONCURRENT CORES :: getInstance_Global()->get_NumCores() -1

//	METHODS **********************************************************************************************************************************************
// 	******************************************************************************************************************************************************
            void launchEnable_Activate(unsigned char coreId);
            void launchEnable_ShiftQueValues(unsigned char coreId, unsigned char coreId_A, unsigned char coreId_B);
            void launchEnable_SortQue(unsigned char coreId);
            void launchEnable_Request(unsigned char coreId);
            void launchQue_Update(unsigned char coreId);


//	GET & SET --------------------------------------------------------------------------------------------------------------------------------------------
// GET
            int getCount_LaunchActive(unsigned char coreId);
            int getCount_LaunchIdle(unsigned char coreId);
            int getCount_LaunchWait(unsigned char coreId);
            bool getFlag_Launch_Open();

// SET
            void setCount_LaunchActive(unsigned char coreId, int value);
            void setCount_LaunchIdle(unsigned char coreId, int value);
            void setCount_LaunchWait(unsigned char coreId, int value);
            void setFlag_Launch_Open(bool value);
    };
}
#endif // LAUNCHCONCURRENCY_H
//End <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
